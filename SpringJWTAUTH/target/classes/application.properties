app.jwt-secret=daf66e01593f61a15b857cf433aae03a005812b31234e149036bcc8dee755dbb
app.jwt-expiration-milliseconds=604800000


# Set the data source URL to connect to the MySQL database on localhost, creating the database 
#   if it does not exist, and allowing public key retrieval without SSL
spring.datasource.url=jdbc:mysql://localhost:3306/loginJWT?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true

# Commented out the previous data source URL and using a different one for reference
#spring.datasource.url=jdbc:mysql://localhost:3306/grewebapp

# Set the username for connecting to the database as 'root'
spring.datasource.username=root

# Set the password for connecting to the database as 'Admin'
spring.datasource.password=Admin

# Set the driver class name for MySQL database connection
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Enable showing SQL statements in the console
spring.jpa.show-sql: true

# Automatically update the database schema when the application starts
spring.jpa.hibernate.ddl-auto=update

# Set the Hibernate dialect for MySQL 8
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect



# Set the JWT secret key for authentication
#app.jwt-secret=daf66e01593f61a15b857cf433aae03a005812b31234e149036bcc8dee755dbb
#
## Set the expiration time for the JWT token in milliseconds (7 days)
#app.jwt-expiration-milliseconds=604800000




# Set the logging level for the org.springframework.security package to DEBUG
#logging.level.org.springframework.security=DEBUG





























#
#
##  IT'S CHECK DATABASE, IF DATABASE IS NOT AVAILABLE IN  MYSQL THEN CREATE AUTO;
#spring.datasource.url=jdbc:mysql://localhost:3306/jwtlogin?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
##spring.datasource.url=jdbc:mysql://localhost:3306/grewebapp
#
##  MYSQL DATABASE USERNAME
#spring.datasource.username=root
#
##    MYSQL DATABASE PASSWORD
#spring.datasource.password=Admin
#
##   The Java SQL framework allows for multiple database drivers. Each driver should supply a class that implements the Driver interface
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#
#  
##   java.lang.Boolean // Default: false // Whether to enable logging of SQL statements.
#spring.jpa.show-sql: true
#
##  DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. 
##  Defaults to "create-drop" when using an embedded database and no schema manager was detected.
##  Otherwise, defaults to "none".
#spring.jpa.hibernate.ddl-auto=update
#
##   Additional native properties to set on the JPA provider.
##  This configuration property sets the Hibernate dialect to be used for MySQL 8.
##   It specifies that the MySQL 8 dialect should be used for database interaction when using Spring Data JPA.
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect







#spring.main.allow-bean-definition-overriding=true
#spring.main.allow-circular-references=true
#











# hibernate properties
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
#spring.jpa.hibernate.ddl-auto = update

#logging.level.org.springframework.security=DEBUG